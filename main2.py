import logging
import time
import random
from typing import Final
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes,CallbackContext
from bs4 import BeautifulSoup
import requests

print('Starting up bot...')

TOKEN: Final = 'API_KEY'
BOT_USERNAME: Final = '@TTelegramV101VBot'
API_URL="https://api.telegram.org/bot"API_KEY"/sendMessage"

"""
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
"""

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('Hello there! I\'m a bot. What\'s up?')

async def komutlar_command(update:Update, context: ContextTypes.DEFAULT_TYPE):
    komut="/start => Selam verir\n/help =>Ne yapabileceÄŸini sÃ¶yler\n/coin =>BTC ile ETH'un gÃ¼ncel deÄŸerlerini gÃ¶steririr" +\
        "\n/doviz => USD ile EURO'nun gÃ¼ncel deÄŸerlerini gÃ¶sterir.\n/zar => 1 ile 6 arasÄ±nda sayÄ± sÃ¶yler" +\
        "\n/anket => Åžuan ki anketimizi cevaplamÄ±ÅŸ olursunuz"
    await update.message.reply_text(komut)

async def coin_command(update: Update,context: ContextTypes.DEFAULT_TYPE):
    url3 = "https://www.google.com/finance/quote/BTC-USD?hl=tr"
    sayfa3 = requests.get(url3)
    html_sayfa3 = BeautifulSoup(sayfa3.content, "html.parser")
    BTC = html_sayfa3.find("div", class_="YMlKec fxKbKc").getText()
    BTC_flo = BTC.replace(",", "").replace(",", ".")
    BTC_double = float(BTC_flo)
    BTClike = f"Bitcoin'in gÃ¼ncel deÄŸeri: $ {BTC_double}"

    url4 = "https://www.google.com/finance/quote/ETH-USD"
    sayfa4 = requests.get(url4)
    html_sayfa4 = BeautifulSoup(sayfa4.content, "html.parser")
    ETH = html_sayfa4.find("div", class_="YMlKec fxKbKc").getText()
    ETH_flo = ETH.replace(",", "").replace(",", ".")
    ETH_double = float(ETH_flo)
    ETHlike = f"Ethereum'un gÃ¼ncel deÄŸeri: $ {ETH_double}"
    Valuue1=f"â‚¿ {BTClike}\nâ§« {ETHlike}"
    await update.message.reply_text(Valuue1)

async def doviz_command(update: Update,context: ContextTypes.DEFAULT_TYPE):
    url1="https://www.google.com/finance/quote/USD-TRY?hl=tr"
    sayfa=requests.get(url1)
    html_sayfa=BeautifulSoup(sayfa.content,"html.parser")
    USD=html_sayfa.find("div",class_ ="YMlKec fxKbKc").getText()   # Text olarak aldÄ±ÄŸÄ±mÄ±z value string olarak alÄ±yoruz o yÃ¼zden ilk Ã¶nce onu int,float deÄŸer yapÄ±lmalÄ±
    USD = USD.replace(",", ".")
    USD_flo=float(USD)
    roundUSD=round(USD_flo,3)
    DolarLike=(f"Dolar kurunun gÃ¼ncel deÄŸeri: {roundUSD}")

    url2="https://www.google.com/finance/quote/EUR-TRY?hl=tr"
    sayfa2=requests.get(url2)
    html_sayfa2=BeautifulSoup(sayfa2.content,"html.parser")
    Euro=html_sayfa2.find("div",class_="YMlKec fxKbKc").getText()
    Euro=Euro.replace(",",".")
    Euro_flo=float(Euro)
    roundEuro=round(Euro_flo,3)
    EuroLike=(f"Euro kurunun gÃ¼ncel deÄŸeri: {roundEuro}")
    Valuee2=f"ðŸ’µ Dolar kuru'nun gÃ¼ncel deÄŸeri: â‚º {roundUSD} \nðŸ’¶ Euro kuru'nun gÃ¼ncel deÄŸeri: â‚º  {roundEuro}"
    await update.message.reply_text(Valuee2)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('Try typing anything and I will do my best to respond!')

async def zar_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    player_name = update.message.from_user.full_name
    zar_roll = random.randint(1, 6)
    zar =f"Ãœyemiz: {player_name}'in, zarÄ± {zar_roll} geldi!"
    await update.message.reply_text(zar)

async def custom_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('This is a custom command, you can add whatever text you want here.')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Get basic info of the incoming message
    message_type: str = update.message.chat.type
    text: str = update.message.text

    # Print a log for debugging
    print(f'User ({update.message.chat.id}) in {message_type}: "{text}"')

    # React to group messages only if users mention the bot directly
    if message_type == 'group':
        # Replace with your bot username
        if BOT_USERNAME in text:
            new_text: str = text.replace(BOT_USERNAME, '').strip()
            if new_text.startswith("coin"):
                await coin_command(update,context)
                return
        else:
            return  # We don't want the bot respond if it's not mentioned in the group

    response: str = handle_response(text)
    # Reply normal if the message is in private
    print('Bot:', response)
    await update.message.reply_text(response)

async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f'Update {update} caused error {context.error}')

ANKET_SORUSU = "BugÃ¼n'Ã¼n nasÄ±l geÃ§ti?"
SECENEKLER = ["GÃ¼zel", "Ä°dare eder", "KÃ¶tÃ¼"]
Cevaplar = {}

async def anket(update: Update, context):
    user = update.message.from_user
    await update.message.reply_text(f"Merhaba {user.full_name}! {ANKET_SORUSU}",
                                    reply_markup=ReplyKeyboardMarkup([SECENEKLER], one_time_keyboard=True))

async def anket_cevabi(update: Update, context):
    cevap = update.message.text
    user_id = update.message.from_user.id

    if user_id not in Cevaplar:
        Cevaplar[user_id] = cevap
        await update.message.reply_text("CevabÄ±nÄ±z kaydedildi. TeÅŸekkÃ¼r ederiz!")
        return

    await update.message.reply_text("Zaten cevap verdiniz. Tekrar teÅŸekkÃ¼r ederiz!",
                                    reply_markup=ReplyKeyboardRemove())

def handle_response(text):
    # Create your own response logic
    processed: str = text.lower()

    if 'hello' in processed:
        return 'Hey there!'

    if 'how are you' in processed:
        return 'I\'m good!'

    if 'i love python' in processed:
        return 'Remember to subscribe!'

    return 'I don\'t understand'

if __name__ == '__main__':
    app = Application.builder().token(TOKEN).build()

    # Commands
    app.add_handler(CommandHandler('start', start_command))
    app.add_handler(CommandHandler('help', help_command))
    app.add_handler(CommandHandler('custom', custom_command))
    app.add_handler(CommandHandler('coin', coin_command))
    app.add_handler(CommandHandler('doviz', doviz_command))
    app.add_handler(CommandHandler('zar', zar_command))
    app.add_handler(CommandHandler('komut', komutlar_command))
    app.add_handler(CommandHandler('anket', anket))

    # Messages
    app.add_handler(MessageHandler(filters.TEXT, handle_message))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, anket_cevabi))

    # Log all errors
    app.add_error_handler(error)

    print('Polling...')
    # Run the bot
    app.run_polling(poll_interval=5)

